<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: property-path | Tim Nagel]]></title>
  <link href="http://tim.nagel.com.au/blog/categories/property-path/atom.xml" rel="self"/>
  <link href="http://tim.nagel.com.au/"/>
  <updated>2012-05-15T19:11:03+10:00</updated>
  <id>http://tim.nagel.com.au/</id>
  <author>
    <name><![CDATA[Tim Nagel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using PropertyPath on your own objects]]></title>
    <link href="http://tim.nagel.com.au/symfony2/property-path/using-propertypath-on-your-own-objects"/>
    <updated>2012-05-11T00:00:00+10:00</updated>
    <id>http://tim.nagel.com.au/symfony2/property-path/using-propertypath-on-your-own-objects</id>
    <content type="html"><![CDATA[<p>Something that comes up every so often is how to convert the name of
a property into a getter or setter, and generally the solution proposed
is something like the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$accessor = &#39;get&#39; . ucfirst($property);</span>
</span><span class='line'><span class="x">$object-&gt;$accessor();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>While this might be an acceptable method, there are more elegant solutions,
one of which is using the <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Util/PropertyPath.php">PropertyPath</a> utility provided by the
Symfony2 Form component.</p>

<p>The PropertyPath utility provides more advanced functionality, which will
search for a getter, isser or hasser method, then fall back to trying to
access the property itself.</p>

<p>Consider the following object:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;class Bar</span>
</span><span class='line'><span class="x">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;public $patrons = 0;</span>
</span><span class='line'><span class="x">protected $closed = false;</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Is the bar closed?</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function isClosed()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;closed;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Returns the number of patrons at the bar</span>
</span><span class='line'><span class="x"> * unless it is closed.</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">public function getPatrons()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;closed ? 0 : $this-&amp;gt;patrons;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">// ... more cool stuff ...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Should you need to access information on this object without knowing in
advance which properties you'd like to call, PropertyPath can help you out.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;use Symfony\Component\Form\Util\PropertyPath;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$bar = new Bar();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * Check if the bar is closed, using isClosed</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">$property = &#39;closed&#39;;</span>
</span><span class='line'><span class="x">$path = new PropertyPath($property);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$closed = $path-&gt;getValue($bar);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;/&lt;em&gt;*</span>
</span><span class='line'><span class="x"> * How many patrons are in attendance?</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * Will return the number of patrons or 0 if the bar</span>
</span><span class='line'><span class="x"> * is closed.</span>
</span><span class='line'><span class="x"> &lt;/em&gt;/</span>
</span><span class='line'><span class="x">$property = &#39;patrons&#39;;</span>
</span><span class='line'><span class="x">$path = new PropertyPath($property);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$patrons = $path-&gt;getValue($bar);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Chaining calls</h2>

<p>Another feature of the PropertyPath utility is that it will let you
chain calls down an object graph. Consider you wanted to make a call
that would be converted to <code>$bar-&gt;getPatrons()-&gt;getFirst()-&gt;getName()</code>,
you could use the property path <code>patrons.first.name</code> when constructing
the PropertyPath.</p>
]]></content>
  </entry>
  
</feed>
