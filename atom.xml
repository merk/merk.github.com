<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tim Nagel]]></title>
  <link href="http://tim.nagel.com.au/atom.xml" rel="self"/>
  <link href="http://tim.nagel.com.au/"/>
  <updated>2012-05-15T19:11:03+10:00</updated>
  <id>http://tim.nagel.com.au/</id>
  <author>
    <name><![CDATA[Tim Nagel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Symfony2 migration - Part 1]]></title>
    <link href="http://tim.nagel.com.au/symfony2/ozfortress/a-symfony2-migration-part-1"/>
    <updated>2012-05-15T18:23:00+10:00</updated>
    <id>http://tim.nagel.com.au/symfony2/ozfortress/a-symfony2-migration-part-1</id>
    <content type="html"><![CDATA[<p>In almost every situation, developers will always prefer to create
a brand new application rather than migrate a legacy application.
When you migrate an application, there is a large amount of baggage
that needs to be accounted for which means that you may end up
spending a large amount of time dealing with the legacy baggage.</p>

<p>On top of this, sometimes applications can be so large that it can
be almost impossible to rewrite the entire application in one go.
Another option is to slowly migrate features only a few at a time
while introducing tests to make sure that you&#8217;re not breaking any
front-end functionality.</p>

<p>In this series of articles, I&#8217;m going to document my journey of
migrating an 8 year old vBulletin based application that currently
runs my hobby website <a href="http://ozfortress.com">ozfortress</a>. My plan is to slowly migrate
features to Symfony2 while leaving the legacy vBulletin application
to handle most of the sites features until I find time and
motivation to rewrite each discreet piece of functionality into a
Symfony2 bundle.</p>

<h2>Migration Method</h2>

<p>Having chatted with many people about methods for migrating and
how to handle which part of the site is handled by which part
of the application, legacy or new.</p>

<h3>Symfony2 Routing</h3>

<p>The first method that can be used is sending every request through
the Symfony kernel, letting the router decide which requests should
go to a special <code>LegacyController</code> which will pass off the request
to the legacy application.</p>

<p>This method is great because it allows you to configure the routing
of the entire application inside the Symfony router and not have it
mixed throughout the new and old systems.</p>

<p>Be aware however that this method means loading the Kernel and its
hard depenedencies, followed by the router and any other Symfony
systems for every request which will add overhead to the legacy
parts of your application.</p>

<h3>Falling back to Symfony2</h3>

<p>Another method which will use some webserver configuration to only
use the Symfony2 kernel when the request doesnt match an existing
file path on the filesystem.</p>

<p>The method needs very little custom configuration as the default
<code>.htaccess</code> file follows this logic already.</p>

<p>The benefit of this method is that the Symfony2 system will not be
initialised unless it is needed or if there is a 404 response
required.</p>

<h3>Including parts using ESI</h3>

<p>Another option in the toolkit, while not specifically intended to
be a complete solution to migration is using a reverse proxy that
supports <a href="http://en.wikipedia.org/wiki/Edge_Side_Includes">ESI</a> like Varnish that will let you include ESI tags
in the output of your legacy application where you want content
from the new application to be placed.</p>

<p>The advantage with using this method is that combined with either
of the above methods that you can include partial new functions
inside pages of the old application as you migrate them.</p>

<h2>Next</h2>

<p>In the next article, I will cover setting up an environment that
supports falling back to Symfony2 with ESI capabilities, along
with a strategy for sharing user sessions between the applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PropertyPath on your own objects]]></title>
    <link href="http://tim.nagel.com.au/symfony2/property-path/using-propertypath-on-your-own-objects"/>
    <updated>2012-05-11T00:00:00+10:00</updated>
    <id>http://tim.nagel.com.au/symfony2/property-path/using-propertypath-on-your-own-objects</id>
    <content type="html"><![CDATA[<p>Something that comes up every so often is how to convert the name of
a property into a getter or setter, and generally the solution proposed
is something like the following.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$accessor</span> <span class="o">=</span> <span class="s1">&#39;get&#39;</span> <span class="o">.</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$property</span><span class="p">);</span>
</span><span class='line'><span class="nv">$object</span><span class="o">-&gt;</span><span class="nv">$accessor</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this might be an acceptable method, there are more elegant solutions,
one of which is using the <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Util/PropertyPath.php">PropertyPath</a> utility provided by the
Symfony2 Form component.</p>

<p>The PropertyPath utility provides more advanced functionality, which will
search for a getter, isser or hasser method, then fall back to trying to
access the property itself.</p>

<p>Consider the following object:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$patrons</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$closed</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Is the bar closed?</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">isClosed</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">closed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Returns the number of patrons at the bar</span>
</span><span class='line'><span class="sd">     * unless it is closed.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPatrons</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">closed</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">patrons</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ... more cool stuff ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Should you need to access information on this object without knowing in
advance which properties you&#8217;d like to call, PropertyPath can help you out.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Form\Util\PropertyPath</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$bar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Check if the bar is closed, using isClosed</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$property</span> <span class="o">=</span> <span class="s1">&#39;closed&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyPath</span><span class="p">(</span><span class="nv">$property</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$closed</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$bar</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * How many patrons are in attendance?</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Will return the number of patrons or 0 if the bar</span>
</span><span class='line'><span class="sd"> * is closed.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$property</span> <span class="o">=</span> <span class="s1">&#39;patrons&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$path</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyPath</span><span class="p">(</span><span class="nv">$property</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$patrons</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$bar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chaining calls</h2>

<p>Another feature of the PropertyPath utility is that it will let you
chain calls down an object graph. Consider you wanted to make a call
that would be converted to <code>$bar-&gt;getPatrons()-&gt;getFirst()-&gt;getName()</code>,
you could use the property path <code>patrons.first.name</code> when constructing
the PropertyPath.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling BBCode parsing in FOSCommentBundle]]></title>
    <link href="http://tim.nagel.com.au/symfony2/comment-bundle/enabling-bbcode-parsing-in-foscommentbundle"/>
    <updated>2012-05-04T16:50:00+10:00</updated>
    <id>http://tim.nagel.com.au/symfony2/comment-bundle/enabling-bbcode-parsing-in-foscommentbundle</id>
    <content type="html"><![CDATA[<p>FOSCommentBundle recently added functionality that allows you
to use some kind of markup parser to let your users post more
than just plain text comments. The way it is implemented allows
the developer to choose which parser for whatever language they
desire.</p>

<p>In this article, we assume you are using Symfony2.0 with the
deps file and bin/vendor management. For Symfony2.1 users, you
are able to replace the parts of the instructions with composer,
which is beyond the scope of this article.</p>

<!-- more -->


<p>To be able to use a markup parser, you must be using a commit
of <code>0fb403c6f1</code> or newer, or the upcoming 1.1.0 version.</p>

<h2>Dependencies</h2>

<p>Because of the way that the BBCode parser we&#8217;re going to use works,
we will need to additionally implement a HtmlPurifier to make sure
that the HTML is safe for displaying. For this, we&#8217;ll be using
<a href="https://github.com/Exercise/HTMLPurifierBundle">ExerciseHtmlPurifierBundle</a>. Follow the installation instructions
provided by this bundle.</p>

<p>Done that?</p>

<p>Next we need to install the BBCode parser, add the following to your
deps file and autoload.php:</p>

<figure class='code'><figcaption><span>deps </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[StringParser_BBCode]</span>
</span><span class='line'>    <span class="na">git</span><span class="o">=</span><span class="s">http://github.com/merk/StringParser_BBCode.git</span>
</span><span class='line'><span class="s">    target=stringparser-bbcode</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/autoload.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">registerPrefixes</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="s1">&#39;StringParser&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/stringparser-bbcode/src&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run <code>bin/vendor install</code> to install the parser.</p>

<h2>Configuration</h2>

<p><a href="http://www.christian-seiler.de/projekte/php/bbcode/index_en.html">StringParser_BBCode</a> comes with many different options about how
to configure it, letting you specify which BBCode tags should be allowed
and what they will be transformed into.</p>

<p>We will need to set up a service called <code>BBCodeParser</code> that implements
<a href="https://github.com/FriendsOfSymfony/FOSCommentBundle/blob/master/Markup/ParserInterface.php">ParserInterface</a> from FOSCommentBundle, which has a single method,
<code>parse</code>. We will use the service we implement to configure our
StringParser_BBCode class, but you can use whatever method you&#8217;d like to
get an instance of StringParser_BBCode into our new <code>BBCodeParser</code>.</p>

<p>Our example set up will enable [B] and [I] BBCodes, if you need more take
a look at the documentation provided by <a href="http://www.christian-seiler.de/projekte/php/bbcode/index_en.html">StringParser_BBCode</a>, there
are more examples provided there.</p>

<p>Below is an example implementation of <code>BBCodeParser</code>, a class that will
need to be placed inside a bundle in your application. Generally, an
application will need to have an AppBundle to implement bits and pieces
required for other bundles.</p>

<div><script src='https://gist.github.com/1948617.js?file=BBCode.php'></script>
<noscript><pre><code>&lt;?php

namespace Test\CommentBundle\Markup;

use FOS\CommentBundle\Markup\ParserInterface;
use HTMLPurifier;

class BBCode implements ParserInterface
{
    private $parser;
    private $purifier;

    public function __construct(HtmlPurifier $purifier)
    {
        $this-&gt;purifier = $purifier;
    }

    /**
     * @return \StringParser_BBCode
     */
    protected function getParser()
    {
        if (null === $this-&gt;parser) {
            $parser = new \StringParser_BBCode();
            $parser-&gt;setRootParagraphHandling(true);

            /**
             * Bold
             *
             * [b][/b] -&gt; &lt;b&gt;&lt;/b&gt;
             */
            $parser-&gt;addCode('b', 'simple_replace', null, array(
                'start_tag' =&gt; '&lt;b&gt;',
                'end_tag' =&gt; '&lt;/b&gt;'
            ), 'inline', array('listitem', 'block', 'inline', 'link'), array());

            /**
             * Italics
             *
             * [i][/i] -&gt; &lt;i&gt;&lt;/i&gt;
             */
            $parser-&gt;addCode('i', 'simple_replace', null, array(
                'start_tag' =&gt; '&lt;i&gt;',
                'end_tag' =&gt; '&lt;/i&gt;'
            ), 'inline', array('listitem', 'block', 'inline', 'link'), array());

            $this-&gt;parser = $parser;
        }

        return $this-&gt;parser;
    }

    /**
     * Takes a markup string and returns raw html.
     *
     * @param string $raw
     *
     * @return string
     */
    public function parse($raw)
    {
        $raw = $this-&gt;purifier-&gt;purify($raw);

        return $this-&gt;getParser()-&gt;parse($raw);
    }
}</code></pre></noscript></div>


<p>Once you&#8217;ve got your <code>BBCoderParser</code> set up the way you want it, you need
to configure the Symfony2 container to tell it about the parser, and let
FOSCommentBundle know about it.</p>

<p>The configuration example below sets up the ExerciseHTMLPurifier to
disallow all HTML, combined with the Parser above, will remove all HTML
and then convert the BBCode to HTML.</p>

<blockquote><p><strong>Security Risk</strong></p>

<p>You must be careful with the HTMLPurifier configuration so that
no unexpected HTML gets through the parser. You may expose your website
to XSS attacks if not properly configured.</p></blockquote>

<div><script src='https://gist.github.com/1948617.js?file=config.yml'></script>
<noscript><pre><code>exercise_html_purifier:
    bbcode:
        HTML.Allowed: ''

fos_comment:
    service:
        markup: markup.bbcode

services:
    markup.bbcode:
        class: Test\CommentBundle\Markup\BBCode
        arguments:
            - @exercise_html_purifier.bbcode</code></pre></noscript></div>


<p>And you&#8217;re done. Any comments created from this point onwards will be parsed
for BBCode and that will be converted to the HTML you&#8217;ve specified.</p>
]]></content>
  </entry>
  
</feed>
